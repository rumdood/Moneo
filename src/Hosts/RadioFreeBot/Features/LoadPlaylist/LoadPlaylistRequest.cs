using MediatR;
using Microsoft.EntityFrameworkCore;
using Moneo.Common;
using RadioFreeBot.Configuration;
using RadioFreeBot.ResourceAccess;
using RadioFreeBot.ResourceAccess.Entities;

namespace RadioFreeBot.Features.LoadPlaylist;

public record LoadPlaylistRequest(string ExternalPlaylistId) : IRequest<MoneoResult>;

internal class LoadPlaylistRequestHandler : IRequestHandler<LoadPlaylistRequest, MoneoResult>
{
    private readonly TimeProvider _timeProvider;
    private readonly RadioFreeDbContext _dbContext;
    private readonly IYouTubeMusicProxyClient _youtubeMusicProxyClient;
    private readonly ILogger<LoadPlaylistRequestHandler> _logger;

    public LoadPlaylistRequestHandler(TimeProvider timeProvider, RadioFreeDbContext dbContext, IYouTubeMusicProxyClient youtubeMusicProxyClient, ILogger<LoadPlaylistRequestHandler> logger)
    {
        _timeProvider = timeProvider;
        _dbContext = dbContext;
        _youtubeMusicProxyClient = youtubeMusicProxyClient;
        _logger = logger;
    }

    public async Task<MoneoResult> Handle(LoadPlaylistRequest request, CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(request.ExternalPlaylistId))
            return MoneoResult.Failed("External playlist ID cannot be null or empty.");

        _logger.LogInformation("Loading playlist with ID: {PlaylistId}", request.ExternalPlaylistId);

        var existingPlaylist = await _dbContext.Playlists
            .FirstOrDefaultAsync(pl => pl.ExternalId == request.ExternalPlaylistId, cancellationToken);

        if (existingPlaylist == null)
        {
            existingPlaylist = new Playlist(request.ExternalPlaylistId,
                $"Autogenerated Playlist Name [{request.ExternalPlaylistId}]", 0);
            _dbContext.Playlists.Add(existingPlaylist);
            await _dbContext.SaveChangesAsync(cancellationToken);
            _logger.LogInformation("Created new playlist with ID: {PlaylistId}", request.ExternalPlaylistId);
        }

        var playlistResult =
            await _youtubeMusicProxyClient.GetSongsFromPlaylistAsync(request.ExternalPlaylistId, cancellationToken);

        if (!playlistResult.IsSuccess)
            return MoneoResult.Failed(playlistResult.Message, playlistResult.Exception);
        
        _logger.LogDebug("Received songs for playlist {PlaylistId}: {@Songs}", request.ExternalPlaylistId, playlistResult.Data);

        var songs = playlistResult.Data ?? [];
        if (songs.Count == 0)
            return MoneoResult.Success();

        // Use the batch extension to get or create all songs, artists, and albums
        var songResult = await _dbContext.GetOrCreateSongsAsync(songs, cancellationToken);
        if (!songResult.IsSuccess)
            return MoneoResult.Failed(songResult.Message, songResult.Exception);

        var songMap = songResult.Data; // Dictionary<string, Song>

        var playlistSongEntities = await _dbContext.PlaylistSongs
            .AsNoTracking()
            .Where(ps => ps.PlaylistId == existingPlaylist.Id)
            .ToListAsync(cancellationToken);
        var playlistSongIdSet = playlistSongEntities.Select(ps => ps.SongId).ToHashSet();

        var newPlaylistSongs = new List<PlaylistSong>();

        foreach (var songItem in songs)
        {
            if (songMap.TryGetValue(songItem.Id, out var songEntity))
            {
                if (!playlistSongIdSet.Contains(songEntity.Id))
                {
                    newPlaylistSongs.Add(new PlaylistSong(existingPlaylist.Id, songEntity.Id,
                        _timeProvider.GetUtcNow().UtcDateTime));
                    playlistSongIdSet.Add(songEntity.Id);
                }
            }
        }

        if (newPlaylistSongs.Count > 0)
            _dbContext.PlaylistSongs.AddRange(newPlaylistSongs);

        // Remove PlaylistSongs not in the current list
        var currentSongDbIds = songs
            .Where(s => songMap.ContainsKey(s.Id))
            .Select(s => songMap[s.Id].Id)
            .ToHashSet();

        var playlistSongsToRemove = playlistSongEntities
            .Where(ps => !currentSongDbIds.Contains(ps.SongId))
            .ToList();

        if (playlistSongsToRemove.Count > 0)
        {
            _dbContext.PlaylistSongs.RemoveRange(playlistSongsToRemove);
            _logger.LogDebug("Removed {Count} songs from playlist {PlaylistId} that are not in the current list",
                playlistSongsToRemove.Count, existingPlaylist.ExternalId);
        }

        await _dbContext.SaveChangesAsync(cancellationToken);

        return MoneoResult.Success();
    }
}
