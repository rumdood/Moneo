using System.Collections.Immutable;
using Microsoft.CodeAnalysis.Text;
using Microsoft.CodeAnalysis;
using System.Text;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Moneo.Chat.Generators;

[Generator]
public class UserRequestFactoryGenerator : ISourceGenerator
{
    private const string Lookup = "_lookup";
    private const string CommandKey = "CommandKey";
    
    public void Initialize(GeneratorInitializationContext context)
    {
        // No initialization required
    }

    public void Execute(GeneratorExecutionContext context)
    {
        //Debugger.Launch();
        var userRequestClasses = GetUserRequests(context);

        foreach (var request in userRequestClasses)
        {
            var source = GenerateCommandKeyProperties(request);
            context.AddSource($"{request.Name}WithCommandKey", SourceText.From(source, Encoding.UTF8));
        }
        
        // Generate the factory class code
        var sourceCode = GenerateFactoryClass(userRequestClasses);

        // Add the generated code to the compilation
        context.AddSource("UserRequestFactory", SourceText.From(sourceCode, Encoding.UTF8));
    }

    private static string? GetAttributeValue(INamedTypeSymbol symbol, string attributeName)
    {
        var attribute = symbol.GetAttributes()
            .FirstOrDefault(a => a.AttributeClass?.Name == attributeName);

        if (attribute is null)
        {
            return null;
        }

        var constructor = attribute.AttributeConstructor;
        var arg = attribute.ConstructorArguments.FirstOrDefault();

        return arg is {Type.SpecialType: SpecialType.System_String, Kind: TypedConstantKind.Primitive} 
            ? arg.Value?.ToString() 
            : null;
    }

    private static string GenerateCommandKeyProperties(INamedTypeSymbol userRequest)
    {
        var commandKeyValue = GetAttributeValue(userRequest, "UserCommandAttribute");

        if (commandKeyValue is null)
        {
            throw new InvalidOperationException($"{userRequest.Name} must be marked with a UserCommandAttribute");
        }
        
        var builder = new StringBuilder("// Generated By Source Generator\n\n");
        builder.AppendLine($"\nnamespace {userRequest.ContainingNamespace.ToDisplayString()};");
        builder.AppendLine("\n");
        builder.AppendLine($"public partial class {userRequest.Name}");
        builder.AppendLine("{");
        builder.AppendLine($"    public const string {CommandKey} = \"{commandKeyValue}\";");
        builder.AppendLine("}");
        return builder.ToString();
    }

    private static string GenerateFactoryClass(ImmutableArray<INamedTypeSymbol> userRequests)
    {
        var namespaces = userRequests.Select(u => u.ContainingNamespace.ToDisplayString()).ToImmutableHashSet();

        var codeBuilder = new StringBuilder("// Generated By Source Generator\n\n");

        foreach (var ns in namespaces.OrderBy(k => k))
        {
            codeBuilder.Append("using ");
            codeBuilder.Append(ns);
            codeBuilder.AppendLine(";");
        }
        
        codeBuilder.AppendLine(@"
namespace Moneo.Chat;

public static class UserRequestFactory
{
    private static readonly Dictionary<string, Func<long, string[], IUserRequest>> _lookup = new(StringComparer.OrdinalIgnoreCase);

    public static IUserRequest? GetUserRequest(CommandContext context)
    {
        if (_lookup.Count == 0)
        {
            InitializeLookup();
        }

        if (!_lookup.TryGetValue(context.CommandKey, out var constructor))
        {
            return null;
        }

        return constructor.Invoke(context.ConversationId, context.Args);
    }

    private static void InitializeLookup()
    {");

        foreach (var request in userRequests)
        {
            codeBuilder.AppendLine($"        {Lookup}[{request.Name}.CommandKey] = (id, args) => new {request.Name}(id, args);");
        }

        codeBuilder.AppendLine(@"   }
}");

        return codeBuilder.ToString();
    }

    private static ImmutableArray<INamedTypeSymbol> GetUserRequests(
        GeneratorExecutionContext context)
    {
        var requests = new List<INamedTypeSymbol>();
        foreach (var syntaxTree in context.Compilation.SyntaxTrees)
        {
            var model = context.Compilation.GetSemanticModel(syntaxTree);
            var classes = syntaxTree.GetRoot().DescendantNodes().OfType<ClassDeclarationSyntax>();
            var userRequests = classes
                .Select(c => model.GetDeclaredSymbol(c))
                .OfType<INamedTypeSymbol>()
                .Where(t => t.AllInterfaces.Select(i => i.Name).Contains("IUserRequest") && !t.IsAbstract);
            
            requests.AddRange(userRequests);
        }

        return requests.ToImmutableArray();
    }
}